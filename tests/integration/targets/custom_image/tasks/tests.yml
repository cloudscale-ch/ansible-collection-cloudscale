---
# This test triggers a bug in the api
#- name: Delete a non existent custom image by uuid
#  cloudscale_ch.cloud.custom_image:
#    uuid: "{{ item }}"
#    state: absent
#  loop:
#    - '415caea5-da7c-4aaa-aaaa-ececd38fb8ea'

- name: Fail delete a non existent custom image by name
  cloudscale_ch.cloud.custom_image:
    name: this-image-is-non-existent
    state: absent
  register: delete
- name: Verify Fail delete a non existend custom image by name
  assert:
    that:
      - delete is not changed

- name: Fail import a custom image without url
  cloudscale_ch.cloud.custom_image:
    name: "{{ cloudscale_resource_prefix }}-test-image"
    state: present
    slug: custom-ansible-image
    zones: lpg1
    user_data_handling: 'pass-through'
    tags:
      project: mars
    source_format: raw
  register: failed_import
  ignore_errors: true
- name: Verify Fail import a custom image without url
  assert:
    that:
      - failed_import.msg.startswith('Cannot import a new image without url.')

- name: Import a custom image and wait for import
  cloudscale_ch.cloud.custom_image:
    name: "{{ cloudscale_resource_prefix }}-test-image"
    state: present
    slug: custom-ansible-image
    url: "{{ image_url }}"
    zones: lpg1
    user_data_handling: 'pass-through'
    tags:
      project: mars
    source_format: raw
  register: image1
  retries: 15
  delay: 5
  until: image1.import_status == 'success'
  failed_when: image1.import_status == 'failed'
- name: Verify import a custom image and wait for import
  assert:
    that:
      - image1.import_status == 'success'
      - image1.name == "{{ cloudscale_resource_prefix }}-test-image"

- name: Import a custom image (idempotency)
  cloudscale_ch.cloud.custom_image:
    name: "{{ cloudscale_resource_prefix }}-test-image"
    state: present
    slug: custom-ansible-image
    url: "{{ image_url }}"
    zones: lpg1
    user_data_handling: 'pass-through'
    tags:
      project: mars
    source_format: raw
  register: image
- name: Verify import a custom image (idempotency)
  assert:
    that:
      - image is not changed
      - image.name == "{{ cloudscale_resource_prefix }}-test-image"
      - image.uuid == image1.uuid

- name: Import a custom image with bad url
  cloudscale_ch.cloud.custom_image:
    name: "{{ cloudscale_resource_prefix }}-test-image2"
    state: present
    slug: custom-ansible-image
    url: "{{ image_url }}-non-existent"
    zones: lpg1
    user_data_handling: 'pass-through'
    tags:
      project: mars
    source_format: raw
  register: failed_import
  ignore_errors: true
  until: failed_import.import_status == 'failed'
- name: Verify Fail import a custom image with bad url
  assert:
    that:
      - failed_import.error_message.startswith('Expected HTTP 200, got HTTP 40')

- name: Import a custom image and a failed import with that name exists
  cloudscale_ch.cloud.custom_image:
    name: "{{ cloudscale_resource_prefix }}-test-image2"
    state: present
    slug: custom-ansible-image
    url: "{{ image_url }}"
    zones: lpg1
    user_data_handling: 'pass-through'
    tags:
      project: mars
    source_format: raw
  register: image2
- name: Verify import a custom image
  assert:
    that:
      - image2 is changed
      - image2.name == "{{ cloudscale_resource_prefix }}-test-image2"
      - image2.uuid != image1.uuid

- name: Wait for import
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ image2.uuid }}"
  retries: 15
  delay: 5
  register: import_status
  until: import_status.import_status == 'success'
  failed_when: import_status.import_status == 'failed'
- name: Verify Wait for import
  assert:
    that:
      - import_status is not changed
      - import_status.name == "{{ cloudscale_resource_prefix }}-test-image2"

- name: Get newest image by name
  cloudscale_ch.cloud.custom_image:
    name: "{{ cloudscale_resource_prefix }}-test-image2"
  register: image_by_name
- name: Verify get newest image by name
  assert:
    that:
      - image_by_name is not changed
      - image_by_name.uuid == image2.uuid

- name: Update slug of a custom image
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ item }}"
    slug: ansible-image-slug
  register: image
  loop:
    - "{{ image2.uuid }}"
- name: Verify update slug of a custom image
  assert:
    that:
      - image is changed

- name: Get custom image with updated slug
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ item }}"
  loop:
    - "{{ image2.uuid }}"
  register: image
- name: Verify update slug of a custom image
  assert:
    that:
      - image.results[0].slug == "ansible-image-slug"

- name: Update tags of a custom image
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ item }}"
    tags:
      project: luna
  register: image
  loop:
    - "{{ image2.uuid }}"
- name: Verify update tags of a custom image
  assert:
    that:
      - image is changed
      - image.results[0].tags == "project: luna"

- name: Update user_data_handling of a custom image
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ item }}"
    user_data_handling: 'extend-cloud-config'
  register: image
  loop:
    - "{{ image2.uuid }}"
- name: Verify update user_data_handling of a custom image
  assert:
    that:
      - image is changed

- name: Get custom image with updated user_data_handling
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ item }}"
  loop:
    - "{{ image2.uuid }}"
  register: image
- name: Verify update user_data_handling of a custom image
  assert:
    that:
      - image.results[0].user_data_handling == "extend-cloud-config"

- name: Update slug, tags and user_data_handling of a custom image
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ item }}"
    slug: yet-another-slug
    tags:
      project: jupiter
    user_data_handling: 'pass-through'
  loop:
    - "{{ image2.uuid }}"
  register: image
- name: Verify update slug, tags and user_data_handling of a custom image
  assert:
    that:
      - image is changed
      - image.results[0].slug == "yet-another-slug"
      - image.results[0].tags == "project: jupiter"
      - image.results[0].user_data_handling == "pass-through"

- name: List all custom images
  uri:
    url: 'https://api.cloudscale.ch/v1/custom-images'
    headers:
      Authorization: 'Bearer {{ cloudscale_api_token }}'
    status_code: 200
  register: image_list
  until: image_list is not failed
  retries: 5
  delay: 3
- name: Verify that two custom images are created by this test run
  assert:
    that:
      - image_list.json | selectattr("name","search", "{{ cloudscale_resource_prefix }}" ) | list | length == 2

- name: Delete image by uuid
  cloudscale_ch.cloud.custom_image:
    uuid: "{{ image1.uuid }}"
    state: absent
  register: image1
- name: Verify delete image by uuid
  assert:
    that:
      - image1 is changed
      - image1.state == 'absent'
- name: Delete image by name
  cloudscale_ch.cloud.custom_image:
    name: "{{ image2.name }}"
    state: absent
  register: image2
- name: Verify delete image by uuid
  assert:
    that:
      - image2 is changed
      - image2.state == 'absent'

- name: List all custom images
  uri:
    url: 'https://api.cloudscale.ch/v1/custom-images'
    headers:
      Authorization: 'Bearer {{ cloudscale_api_token }}'
    status_code: 200
  register: image_list
  until: image_list is not failed
  retries: 5
  delay: 3
- name: Verify that the two custom images of this test run are deleted
  assert:
    that:
      - image_list.json | selectattr("name","search", "{{ cloudscale_resource_prefix }}" ) | list | length == 0
